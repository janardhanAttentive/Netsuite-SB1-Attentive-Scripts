/**
 * Module Description
 *
 * Version    Date            Author           Remarks
 * 1.00       30 Dec 2020     Doug Humberd     Handles user events on Vendor records
 * 	                          Doug Humberd     Added button to Approve Vendor Record
 *                            Doug Humberd     Added "am_ven_needVenChgDetExplainer" for the Vendor Change Details project
 * 							  Doug Humberd	   Updated "am_ven_addApproveVendorButton" to only show button to certain user roles
 *                            Doug Humberd     Added "am_ven_setNewVendorRecord" to check off New Vendor Record field when new vendor is created
 *                            Doug Humberd     Updated "am_ven_addApproveVendorButton" to validate Vendor Approval permissions from new Vendor Approval checkbox on employee record instead of via role
 * 1.05       18 Jan 2021     Doug Humberd     Updated 'am_ven_addApproveVendorButton' with new permissions (Attentive Mobile Accountant)
 * 1.10       18 Jan 2021     Doug Humberd     Updated for changes to "Vendor Creation Details" (from Vendor Change Details)
 * 1.15       20 Dec 2021     Doug Humberd     Updated 'am_ven_setNewVendorRecord' to check for 'Is Autogenerated Representing Entity' field
 * 1.2        04 Apr 2022     Janardhan S      Updated "am_ven_needVenChgDetExplainer" and "am_ven_setNewVendorRecord" to check for CompanyName if it exists only
 */


/***********************************
 * Constants
 *
 ***********************************/


/**
 * Performs actions immediately before a record is served to a client.
 *
 * @appliedtorecord vendor
 *
 * @param {String} type Operation types: create, edit, view, copy, print, email
 * @param {nlobjForm} form Current form
 * @param {nlobjRequest} request Request object
 * @returns {Void}
 */
function am_ven_beforeLoad(type, form, request){
    try {
    	am_ven_setClientScript(type, form, request);
		am_ven_addApproveVendorButton(type, form, request);
		am_ven_needVenChgDetExplainer(type, form, request);
    } catch (e) {
        am_ven_logError(e);
        throw e;
    }
}


/**
 * Performs actions immediately prior to a write event on a record.
 *
 * @appliedtorecord vendor
 *
 * @param {String} type Operation types: create, edit, delete, xedit,
 *                      approve, cancel, reject (SO, ER, Time Bill, PO & RMA only)
 *                      pack, ship (IF only)
 *                      dropship, specialorder, orderitems (PO only)
 *                      paybills (vendor payments)
 * @returns {Void}
 */
function am_ven_beforeSubmit(type) {
    nlapiLogExecution('DEBUG', 'Before Submit - Type: ' + type, '');
    try {
        //am_ven_beforeSubmitFunction(type);
    } catch (e) {
        am_ven_logError(e);
        throw e;
    }
}


/**
 * Performs actions immediately following a write event on a record.
 *
 * @appliedtorecord vendor
 *
 * @param {String} type Operation types: create, edit, delete, xedit,
 *                      approve, cancel, reject (SO, ER, Time Bill, PO & RMA only)
 *                      pack, ship (IF only)
 *                      dropship, specialorder, orderprojects (PO only)
 *                      paybills (vendor payments)
 * @returns {Void}
 */
function am_ven_afterSubmit(type) {
    nlapiLogExecution('DEBUG', 'After Submit - Type: ' + type, '');
    try {
        //am_ven_afterSubmitFunction(type);
    	//am_ven_sendReapprvlEmail(type);
    	am_ven_setNewVendorRecord(type);
    } catch (e) {
			var vendId = nlapiGetRecordId();
		var strMsg = '';
		var recurl = nlapiResolveURL('RECORD', 'vendor', vendId);
					strMsg += e;
					strMsg += '   ';
					strMsg += '<a href="'+recurl+'">Link to record</a><br/>\n';	
        am_ven_logError(e);
        throw strMsg;
    }
}


/**
 * Writes an error message to the Script Execution Log
 *
 * @param {nlobjError} e - The NetSuite Error object passed in from the calling function
 *
 * @returns {Void}
 */
function am_ven_logError(e) {
    // Log the error based on available details
    if (e instanceof nlobjError) {
        nlapiLogExecution('ERROR', 'System Error', e.getCode() + '\n' + e.getDetails());
    } else {
        nlapiLogExecution('ERROR', 'Unexpected Error', e.toString());
    }
}




/**
 * Sets the client script to be used by this form
 * 
 * @appliedtorecord vendor
 *   
 * @param {String} type Operation types: create, edit, view, copy, print, email
 * @param {nlobjForm} form Current form
 * @param {nlobjRequest} request Request object
 * @returns {Void}
 */
function am_ven_setClientScript(type, form, request) {
	form.setScript('customscript_scg_vendor_cs');
}


/**
 * Handles click events on the Approve Vendor button
 * 
 * @appliedtorecord vendor
 *   
 * @param {String} type Operation types: create, edit, view, copy, print, email
 * @param {nlobjForm} form Current form
 * @param {nlobjRequest} request Request object
 * @returns {Void}
 */
function am_ven_addApproveVendorButton(type, form, request){
	
	if (type == 'view') {
		
		var appvd = nlapiGetFieldValue('custentity_scg_vendor_approved');
		nlapiLogExecution('DEBUG', 'Approved', appvd);
		
		//var user = nlapiGetUser();
		//nlapiLogExecution('DEBUG', 'User', user);
		
		var urole = nlapiGetRole();
		nlapiLogExecution('DEBUG', 'User Role', urole);
		
		//Check employee record for Vendor Approver rights
		//var vendAppr = nlapiLookupField('employee', user, 'custentity_scg_vendor_approver');
		//nlapiLogExecution('DEBUG', 'Vendor Approver', vendAppr);
		
		//if (urole != '3' && urole != '1' && urole != '41'){//1 = Accountant, 41 - CFO
		//if (urole != '3' && vendAppr == 'F'){
			//nlapiLogExecution('DEBUG', 'User Not Authorized', 'Do Not Add Approve Button');
		//}
		
		if (appvd == 'F' && (urole == '3' || urole == '1020')){//1020 = Attentive Mobile Accountant
		//if (appvd == 'F' && urole == '3'){
		//if (appvd == 'F' && (urole == '3' || vendAppr == 'T')){
			
			nlapiLogExecution('DEBUG', 'addApproveVendorButton', 'Approve Vendor Button Added');
			
			form.addButton('custpage_approve_vendor_button', 'Approve Vendor', 'am_ven_approveVendor()');
			
		}else{
			nlapiLogExecution('DEBUG', 'User Not Authorized', 'Do Not Add Approve Button');
		}
		
	}
	
}



function isEmpty(stValue)
{ 
    if ((stValue == '') || (stValue == null) ||(stValue == undefined))
    {
        return true;
    }
    
    return false;
}




/**
 * Displays the need for a Vendor Change Details record to be entered
 * 
 * @appliedtorecord vendor
 *   
 * @param {String} type Operation types: create, edit, view, copy, print, email
 * @param {nlobjForm} form Current form
 * @param {nlobjRequest} request Request object
 * @returns {Void}
 */
function am_ven_needVenChgDetExplainer(type, form, request){
	//try{
	if (type == 'view' || type == 'edit') {
		var vcdReq = nlapiGetFieldValue('custentity_scg_vend_crtn_det_req');
		if (vcdReq != 'T') {
			return;
		}
		
		var companyName = nlapiGetFieldValue('companyname');
		
		//Added on 04-01-2022
		if(companyName)
		{
		if (companyName.indexOf('Interco') > -1){
			return;
		}
		}
		
		// Add the Need Vendor Change Details Record Explainer
		//form.addField('custpage_need_vcd_explain', 'inlinehtml').setDefaultValue('<p style="color: red; font-size:120%;">A Vendor Change Details Record is needed for this Vendor, as either a recent name change, address change, or a bank details change, has occurred.  A new record can be entered by navigating to the Custom tab and clicking the "New Vendor Change Details" button</p>');
		
		nlapiSetFieldValue('custentity_scg_vend_chg_det_explainer', '<p style="color: red; font-size:120%;"><b>A Vendor Creation Details Record is required for this Vendor.  A new record can be entered by navigating to the Vendor Creation Details tab and clicking the "New Vendor Creation Details" button</b></p>');
	}
	/*
	}
	catche(e)
	{
	  var error_msg = 'Please Update the Company Name Information on the Vendor Record'
	  throw error_msg;
	}
	*/
}


/**
 * Sends an email to users with user role 'Li US A/P Manager' after an address change is made to request re-approval of vendor
 *
 * @appliedtorecord vendor
 *
 * @param {String} type Operation types: create, edit, delete, xedit,
 *                      approve, cancel, reject (SO, ER, Time Bill, PO & RMA only)
 *                      pack, ship (IF only)
 *                      dropship, specialorder, orderprojects (PO only)
 *                      paybills (vendor payments)
 * @returns {Void}
 */
function am_ven_sendReapprvlEmail(type){
	
	if (type != 'edit'){
		return;
	}
	
	var venId = nlapiGetRecordId();
	var userID = nlapiGetUser();
	var sendEmail = nlapiGetFieldValue('custentity_scg_send_reappvl_email');
	
	//nlapiLogExecution('DEBUG', 'venId', venId);
	//nlapiLogExecution('DEBUG', 'userID', userID);
	//nlapiLogExecution('DEBUG', 'sendEmail', sendEmail);
	
	if (sendEmail == 'T'){
    	
    	//Send Email to Managers advising the re-approval is needed
        var recipient = null;
		var emailList = null;
		
		// Get Parameters
		var emailTemplate = nlapiGetContext().getSetting('SCRIPT', 'custscript_vendor_reappvl_req_template');
		
		// Merge email
		var emailMerger = nlapiCreateEmailMerger(emailTemplate);
		emailMerger.setEntity('vendor',venId);
		
		var mailRec = emailMerger.merge();
		var emailSubject = mailRec.getSubject();
		var emailBody = mailRec.getBody();
		
		nlapiLogExecution('DEBUG', 'Email Template', 'Template: '+ emailTemplate+ ' Subject: '+emailSubject);
		
		//Get a list of employees to email
		var searchresults = getEmployeeIDs();
		
		for (var i = 0; i < searchresults.length; i++){
			
			//var empId = searchresults[i].getValue('internalid');
			var empEmail = searchresults[i].getValue('email');
			
			if (empEmail){
				if (emailList == null){
					emailList = empEmail;
				}else{
					emailList = emailList + ',' + empEmail;
				}
			}
			
		}
		
		// If Employee Email List is null then end script
		if (emailList == null){
			return;
		}
		
		// Employee Email List may have spaces or ; between emails, replace these with a comma
		emailList = emailList.replace(" ", ",");
		emailList = emailList.replace(";", ",");
		
		recipient = emailList.split(",");
		
		nlapiLogExecution('DEBUG', 'Recipient Set to Array', 'Array: '+ recipient + ' Recipient Array length: ' + recipient.length);
		
		// Send Email if there is a recipient
		if(recipient != null){
			
			var records = new Object();
			records['entity'] = venId;
			
			nlapiSendEmail(userID, recipient, emailSubject, emailBody, null, null, records, null, true, false);
		
			nlapiLogExecution('DEBUG', 'Send Email', 'Email sent to recipient (' + recipient + ') with email subject (' + emailSubject + ') and email body (' + emailBody + ')');
		}
    	
    }//End if (sendEmail == 'T')
	
	//Uncheck 'Send Re-Approval Email' so that email won't get sent a second time
	nlapiSubmitField('vendor', venId, 'custentity_scg_send_reappvl_email', 'F');
	
}





/**
 * Returns a list of employees to send emails to
 *
 * @appliedtorecord employee
 *
 * @returns {nlobjSearch}
 */
function getEmployeeIDs(){
	
	//Define filters
	var filters = new Array();
	filters.push(new nlobjSearchFilter('role', null, 'anyof', LI_US_AP_MANAGER));
	//filters.push(new nlobjSearchFilter('internalidnumber', null, 'greaterthan', minRecId));
	//filters.push(new nlobjSearchFilter('internalid', null, 'anyof', '234076'));//TEMPORARY FILTER FOR TESTING
	  
	// Define columns
	var columns = new Array();
	columns.push(new nlobjSearchColumn('internalid', null, null));
	columns.push(new nlobjSearchColumn('email', null, null));
	columns[0].setSort(false /* ascending */);
	  
	// Get results
	var results = nlapiSearchRecord('employee', null, filters, columns);
	  
	// Return
	return results;
	
}





/**
 * Checks off the 'New Vendor Record' field when a new vendor is created
 * Prevents the record from requiring a Vendor Change Details record until after the vendor record is approved.
 *
 * @appliedtorecord vendor
 *
 * @param {String} type Operation types: create, edit, delete, xedit,
 *                      approve, cancel, reject (SO, ER, Time Bill, PO & RMA only)
 *                      pack, ship (IF only)
 *                      dropship, specialorder, orderprojects (PO only)
 *                      paybills (vendor payments)
 * @returns {Void}
 */
function am_ven_setNewVendorRecord(type){
	
	
	if (type != 'create'){
		return;
	}
	
	
	var vendId = nlapiGetRecordId();
	
	if (vendId){
		var vendRec = nlapiLoadRecord('vendor', vendId, {recordmode: 'dynamic'});
		
		var existVendor = vendRec.getFieldValue('custentity_scg_exist_vendor_record');
		var isAutoGen = vendRec.getFieldValue('isautogeneratedrepresentingentity');
		var companyName = vendRec.getFieldValue('companyname');
		
		nlapiLogExecution('DEBUG', 'Existing Vendor = ' + existVendor, 'Is AutoGenerated = ' + isAutoGen);
		nlapiLogExecution('DEBUG', 'Company Name', companyName);
		
		/*
		//if (existVendor == 'F'){
		if (existVendor != 'T' && isAutoGen != 'T' && companyName.indexOf('Interco') == -1){
			vendRec.setFieldValue('custentity_scg_vend_crtn_det_req', 'T');
		}
		*/
		// Added ON 04-01-2022
		if(existVendor != 'T' && isAutoGen != 'T')
		{
			if(companyName)
			{
				if(companyName.indexOf('Interco') == -1)
				{
					vendRec.setFieldValue('custentity_scg_vend_crtn_det_req', 'T');
				}
			}
			else {
					vendRec.setFieldValue('custentity_scg_vend_crtn_det_req', 'T');
			}
		}
		
		//If Interco, auto-Approve
		if(companyName)
		{
		if (companyName.indexOf('Interco') > -1)
		{
			nlapiLogExecution('DEBUG', 'Interco Vendor', 'AUTO APPROVE');
			vendRec.setFieldValue('custentity_scg_vendor_approved', 'T');
		}
		}
		
		//vendRec.setFieldValue('custentity_scg_new_vendor_record', 'T');
		//vendRec.setFieldValue('custentity_scg_name_addr_chgd', 'F');
		//vendRec.setFieldValue('custentity_scg_bank_details_chgd', 'F');
		//vendRec.setFieldValue('custentity_update_made_by', '');
		nlapiSubmitRecord(vendRec);
	}
	
}




